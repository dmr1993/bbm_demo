; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\bin\app_main.o --asm_dir=..\Out\Lst\ --list_dir=..\Out\Lst\ --depend=..\out\bin\app_main.d --cpu=Cortex-M0 --apcs=interwork -O3 -I..\head -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\Inc\LinkSafe --omf_browse=..\out\bin\app_main.crf ..\src\App_Main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  APP_Init PROC
;;;27     *****************************************************************************************************************/
;;;28     void APP_Init(void)
000000  4820              LDR      r0,|L1.132|
;;;29     {
;;;30     
;;;31      g_var1 = 0x77;    																											//此处演示如何将全局变量初始化
;;;32      g_var1 = 0x88;
000002  2188              MOVS     r1,#0x88
000004  7001              STRB     r1,[r0,#0]
;;;33     }
000006  4770              BX       lr
;;;34     
                          ENDP

                  APP_Command PROC
;;;50     
;;;51     u32 APP_Command(u8 LenOfIn,u8 *pInBuf,u8 * LenOfOut,u8 *pOutBuf)
000008  b5ff              PUSH     {r0-r7,lr}
;;;52     {
00000a  460f              MOV      r7,r1
;;;53      u8  cmd;
;;;54      u32 res; 
;;;55      
;;;56      res = 0;
;;;57      cmd = pInBuf[0];//
00000c  7809              LDRB     r1,[r1,#0]
00000e  b081              SUB      sp,sp,#4              ;52
000010  4614              MOV      r4,r2                 ;52
000012  2500              MOVS     r5,#0
;;;58     
;;;59     	switch(cmd)
;;;60       {
;;;61     		
;;;62     		
;;;63     			/*********************************************    通讯测试      ************************************************/
;;;64     			/***************************************************************************************************************/		
;;;65     			case 0x01:
;;;66     				 Communication_Test( pInBuf + 1, pOutBuf , LenOfIn - 1 ); 
;;;67     				 * LenOfOut = LenOfIn-1;
;;;68     				 break;	
;;;69     			
;;;70     			
;;;71     			
;;;72     			/***************************  写入密钥  ---可供 对比认证、参数保护 、算法移植 密钥写入**************************/
;;;73     			/***************************************************************************************************************/
;;;74     			case 0x02:	
;;;75     					Write_Key( pInBuf+1 ); 
;;;76     					* LenOfOut = 0;
;;;77     				 break;
;;;78     
;;;79     
;;;80     			
;;;81     			/*********************************************   对比认证   ****************************************************/
;;;82     			/***************************************************************************************************************/
;;;83     			case 0x03:	
;;;84     				 res=Contrast_Authentication(pInBuf+1,pOutBuf); 
;;;85     				 if( res == 0) return 0;
;;;86     				 * LenOfOut = 0x10;	
000014  2610              MOVS     r6,#0x10
000016  000b              MOVS     r3,r1                 ;59
000018  f7fffffe          BL       __ARM_common_switch8
00001c  0830050c          DCB      0x08,0x30,0x05,0x0c
000020  11181c23          DCB      0x11,0x18,0x1c,0x23
000024  2830              DCB      0x28,0x30
000026  1e45              SUBS     r5,r0,#1              ;59
000028  b2ea              UXTB     r2,r5                 ;66
00002a  1c78              ADDS     r0,r7,#1              ;66
00002c  9904              LDR      r1,[sp,#0x10]         ;66
00002e  f7fffffe          BL       Communication_Test
000032  e002              B        |L1.58|
000034  1c78              ADDS     r0,r7,#1              ;75
000036  f7fffffe          BL       Write_Key
                  |L1.58|
00003a  7025              STRB     r5,[r4,#0]            ;67
00003c  e01b              B        |L1.118|
00003e  1c78              ADDS     r0,r7,#1              ;84
000040  9904              LDR      r1,[sp,#0x10]         ;84
000042  f7fffffe          BL       Contrast_Authentication
000046  e009              B        |L1.92|
                  |L1.72|
000048  7026              STRB     r6,[r4,#0]
;;;87     				 break;
00004a  e014              B        |L1.118|
;;;88     			 
;;;89     
;;;90     			
;;;91     			
;;;92     			
;;;93     			
;;;94     			/********************************************   参数保护    ****************************************************/
;;;95     			/***************************************************************************************************************/
;;;96     			
;;;97     			/*************************************** 发行阶段重要参数写入 **************************************************/
;;;98     			case 0x04:
;;;99     				Write_Important_Data(pInBuf+1);  
00004c  1c78              ADDS     r0,r7,#1
00004e  f7fffffe          BL       Write_Important_Data
;;;100    				* LenOfOut = 0;
;;;101    				break;
000052  e7f2              B        |L1.58|
;;;102    			
;;;103    			/*************************************** 使用阶段重要参数读取 **************************************************/
;;;104    			case 0x05:
;;;105    				res=Read_Important_Data(pInBuf+1,pOutBuf); 
000054  1c78              ADDS     r0,r7,#1
000056  9904              LDR      r1,[sp,#0x10]
000058  f7fffffe          BL       Read_Important_Data
                  |L1.92|
;;;106    				if(res == 0 ) return 0;
00005c  2800              CMP      r0,#0
00005e  d00b              BEQ      |L1.120|
000060  e7f2              B        |L1.72|
;;;107    				* LenOfOut = 0x10;
;;;108    				break;		
;;;109    			
;;;110    
;;;111    			
;;;112    			
;;;113    			
;;;114    			/*******************************************    算法移植     ***************************************************/
;;;115    			/***************************************************************************************************************/
;;;116    			case 0x06:
;;;117    			 res=Algorithm_Transplantation(pInBuf+1,pOutBuf); 
000062  1c78              ADDS     r0,r7,#1
000064  9904              LDR      r1,[sp,#0x10]
000066  f7fffffe          BL       Algorithm_Transplantation
;;;118    			 * LenOfOut = res;
;;;119    			 break;
00006a  e003              B        |L1.116|
;;;120    
;;;121    				
;;;122    			/*******************************************         ***************************************************/
;;;123    			/***************************************************************************************************************/
;;;124    			case 0x07:
;;;125    			 res=My_Algorithm(pInBuf+1,pOutBuf); 
00006c  1c78              ADDS     r0,r7,#1
00006e  9904              LDR      r1,[sp,#0x10]
000070  f7fffffe          BL       My_Algorithm
                  |L1.116|
000074  7020              STRB     r0,[r4,#0]            ;118
                  |L1.118|
;;;126    			 * LenOfOut = res;
;;;127    			 break;
;;;128    			
;;;129    			
;;;130    			
;;;131    			default:
;;;132    					* LenOfOut = 0;
;;;133    				return 0;														 //返回错误		 
;;;134    	
;;;135    	}
;;;136    	
;;;137    	
;;;138    	return 1 ; //命令处理成功
000076  2001              MOVS     r0,#1
                  |L1.120|
;;;139    	
;;;140    	
;;;141    }
000078  b005              ADD      sp,sp,#0x14
00007a  bdf0              POP      {r4-r7,pc}
00007c  7015              STRB     r5,[r2,#0]            ;132
00007e  2000              MOVS     r0,#0                 ;133
000080  e7fa              B        |L1.120|
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  g_var1
000000  00                DCB      0x00

                          AREA ||area_number.5||, DATA, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.data||
                  g_var2
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L17.16|
00000e  461d              MOV      r5,r3
                  |L17.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

